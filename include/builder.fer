let io = import('std/io');
let os = import('std/os');
let fs = import('std/fs');
let map = import('std/map');
let sys = import('std/sys');
let lang = import('std/lang');

let default_ccache = os.find_exec('ccache');
let default_compiler = 'g++';
let default_inc_dir = '-I/usr/include';
let default_lib_dir = '-L/usr/lib';
let shared_lib_out_ext = '.so';
let shared_lib_flag = '-shared';

if !default_ccache.empty() {
	default_ccache += ' ';
}

if os.name == 'macos' || os.name == 'bsd' {
	default_compiler = 'clang++';
	default_inc_dir += ' -I/usr/local/include';
	default_lib_dir += ' -L/usr/local/lib';
}
default_lib_dir += ' -L' + sys.dll_core_load_loc;

if os.name == 'macos' {
	shared_lib_out_ext = '.dylib';
	shared_lib_flag = '-dynamiclib';
}

# -lgmp is required for mac at least
let builder_t = lang.struct(
	is_dll = false,
	ccache = default_ccache,
	compiler = default_compiler,
	compiler_opts = ' -std=c++11 -O2 ',
	inc_dirs = ' ' + default_inc_dir + ' ',
	lib_dirs = ' ' + default_lib_dir + ' ',
	lib_flags = ' -lferalvm -lgmpxx -lgmp -lmpfr ',
	srcs = ' ',
	linker_flags = ' '
);

let new = fn() {
	return builder_t();
};

let make_dll in builder_t = fn() {
	self.compiler_opts += shared_lib_flag + ' -fPIC -rdynamic -Wl,-rpath,' + sys.dll_load_loc + ' ';
	self.is_dll = true;
	return self;
};

let add_comp_opts in builder_t = fn(opt) {
	self.compiler_opts += opt + ' ';
	return self;
};

let add_inc in builder_t = fn(inc_dir) {
	self.inc_dirs += inc_dir + ' ';
	return self;
};

let add_lib in builder_t = fn(lib_flag, lib_dir = '') {
	if !lib_dir.empty() {
		self.lib_dirs += lib_dir + ' ';
	}
	self.lib_flags += lib_flag + ' ';
	return self;
};

let add_src in builder_t = fn(src) {
	self.srcs += src + ' ';
	return self;
};

let perform in builder_t = fn(output_file, .kw_args) {
	let dry_run = sys.args.find('dry');

	let compiler_loc = os.find_exec(self.compiler);
	if compiler_loc.empty() {
		io.cprintln('{w}could not find compiler {r}', self.compiler, ' {w}in {c}$PATH{0}');
		return 1;
	}

	let main_src = '';

	if kw_args['src'] != nil {
		main_src = ' ' + kw_args['src'] + ' ';
	}

	if !dry_run && !fs.exists('build') { os.mkdir('build'); }

	let out_file = output_file;
	if self.is_dll { out_file = 'libferal' + out_file + shared_lib_out_ext; }
	let cmd = self.ccache + compiler_loc + self.compiler_opts + self.inc_dirs +
		  self.lib_dirs + self.lib_flags + self.srcs + main_src + '-o build/' +
		  out_file;

	io.cprintln('Building ...');
	if dry_run {
		io.cprintln('{w}=> {c}', cmd, '{0}');
		return 0;
	}
	io.cprintln('{w}=> {c}build/', out_file, '{0}');

	let res = os.exec(cmd);
	if res != 0 { return res; }

	# installation part
	if !sys.args.find('install') { return res; }

	io.cprintln('Installing ...');

	let inc_src = 'include';
	if kw_args['inc'] != nil {
		inc_src = kw_args['inc'];
	}
	if !inc_src.empty() && fs.walkdir(inc_src).len() > 0 {
		io.cprintln('{w}=> {c}', inc_src, '/* {0}-> {c}', sys.inc_load_loc, '/ {0}...');
		if !dry_run { res = os.copy(inc_src + '/*', sys.inc_load_loc + '/'); }
		if res != 0 { return res; }
	}

	let lib_src = 'build';
	if kw_args['lib'] != nil {
		lib_src = kw_args['lib'];
	}
	if !lib_src.empty() && fs.walkdir(lib_src).len() > 0 {
		io.cprintln('{w}=> {c}', lib_src, '/* {0}-> {c}', sys.dll_load_loc, '/ {0}...');
		if !dry_run { res = os.copy(lib_src + '/*', sys.dll_load_loc + '/'); }
		if res != 0 { return res; }
	}

	let bin_src = 'bin';
	if kw_args['bin'] != nil {
		bin_src = kw_args['bin'];
	}
	if !bin_src.empty() && fs.walkdir(bin_src).len() > 0 {
		io.cprintln('{w}=> {c}', bin_src, '/* {0}-> {c}', sys.dll_load_loc, '/ {0}...');
		if !dry_run { res = os.chmod(bin_src + '/*'); }
		if res != 0 { return res; }
		if !dry_run { res = os.copy(bin_src + '/*', sys.dll_load_loc + '/'); }
		if res != 0 { return res; }
	}

	if !dry_run {
		io.cprintln('Installation successful!');
	}

	return res;
};